/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HelloWorldPaul
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  projectPrefix: "prj"
};
var HelloWorldPaul = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Project Tasks starting");
    await this.loadSettings();
    this.addCommand({
      id: "set-ids",
      name: "Set project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = this.addTaskIDs(sel);
        new import_obsidian.Notice(`Project tasks created from: ${sel}`);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "clear-ids",
      name: "Clear project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = this.clearBlockIDs(sel);
        new import_obsidian.Notice(`Project tasks cleared from: ${sel}`);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "set-ids-block",
      name: "Set project ids on Block",
      editorCallback: (editor, view) => {
        this.blockUpdate(editor, true);
      }
    });
    this.addCommand({
      id: "clear-ids-block",
      name: "Clear project ids on Block",
      editorCallback: (editor, view) => {
        this.blockUpdate(editor, false);
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  blockUpdate(editor, add_ids) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const block_boundary = /^#+\s/;
    let blockStart = cursor.line;
    while (blockStart > 0 && !block_boundary.test(editor.getLine(blockStart - 1))) {
      blockStart--;
    }
    let blockEnd = cursor.line;
    while (blockEnd < editor.lineCount() - 1 && !block_boundary.test(editor.getLine(blockEnd + 1))) {
      blockEnd++;
    }
    const blockContent = editor.getRange({ line: blockStart, ch: 0 }, { line: blockEnd, ch: line.length });
    console.log(`The block is: ${blockContent}`);
    let lines;
    if (add_ids) {
      lines = this.addTaskIDs(blockContent);
    } else {
      lines = this.clearBlockIDs(blockContent);
    }
    let last_line_length = editor.getLine(blockEnd).length;
    editor.replaceRange(lines, { line: blockStart, ch: 0 }, { line: blockEnd, ch: last_line_length });
  }
  clearBlockIDs(sel) {
    let remove_id = /\h?ðŸ†”\s\w+\h*/g;
    sel = sel.replaceAll(remove_id, "");
    let remove_block = /\h?â›”\s\w+\h*/g;
    sel = sel.replaceAll(remove_block, "");
    return sel;
  }
  addTaskIDs(sel) {
    const regex = /^(-\s\[[ x\-\/]\]\s)?(.*)$/mg;
    sel = this.clearBlockIDs(sel);
    console.log(`Replaced ids and blocks to give: ${sel}`);
    const matches = sel.matchAll(regex);
    let lines = "";
    let first = true;
    let idx = 0;
    const prefix = this.settings.projectPrefix;
    for (const match of matches) {
      if (!first) {
        lines += "\n";
      }
      if (match[1]) {
        lines += `${match[1]}${match[2].trim()} \u{1F194} ${prefix}${idx}`;
        if (idx > 0) {
          lines += ` \u26D4 ${prefix}${idx - 1}`;
        }
        idx += 1;
      } else {
        lines += `${match[2].trim()}`;
      }
      first = false;
    }
    return lines;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Project ID prefix").setDesc("Prefix to use when creating an ID for a task").addText((text) => text.setPlaceholder("ID prefix").setValue(this.plugin.settings.projectPrefix).onChange(async (value) => {
      this.plugin.settings.projectPrefix = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
