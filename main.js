/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ProjectTasks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// helpers.ts
var BLOCK_BOUNDARY = /^#+\s/;
var DEBUG = true;
var DEFAULT_SETTINGS = {
  idPrefixMethod: "1" /* UsePrefix */,
  projectPrefix: "prj",
  randomIDLength: 6,
  sequentialStartNumber: 1,
  removeVowels: false,
  firstLettersOfWords: false,
  automaticTagNames: ["Project"],
  clearAllTags: false,
  nestedTaskBehavior: "1" /* ParallelExecution */
};
var ParsedLine = class {
  constructor(is_task, status_type, line_text, nesting) {
    this.is_task = is_task;
    this.status_type = status_type;
    this.line_text = line_text;
    this.nesting = nesting;
    if (this.is_task) {
      let indents = "	".repeat(nesting);
      this.task_prefix = `${indents}- [${status_type}] `;
    } else {
      this.task_prefix = "";
    }
  }
  getLineSplit(line) {
    return line.split(/(\s+)/);
  }
  removeAllTags() {
    return this.removeTags();
  }
  removeTags(tags_to_remove) {
    let words = this.getLineSplit(this.line_text);
    for (let idx = 0; idx < words.length; idx++) {
      let word = words[idx];
      if (word.trim().length != 0) {
        let is_valid_tag = word.startsWith("#") && (!tags_to_remove || tags_to_remove.indexOf(word.slice(1)) >= 0);
        if (is_valid_tag) {
          words[idx] = "";
          if (idx != 0) {
            words[idx - 1] = "";
          } else if (idx != words.length - 1) {
            words[idx + 1] = "";
          }
        }
      } else {
        if (idx == words.length - 1) {
          words[idx] = "";
        }
      }
    }
    return words.join("");
  }
};
var Helper = class {
  // Simple helper class that contains the business logic
  // of the app. This is extracted here to allow unit testing
  constructor() {
  }
  static getNestingLevel(task_marker) {
    let parts = task_marker.replaceAll("\n", "").split("-");
    return parts[0].length;
  }
  static generateRandomDigits(length) {
    const digits = "0123456789";
    let randomString = "";
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * digits.length);
      randomString += digits[randomIndex];
    }
    return randomString;
  }
  static clearBlockIDs(sel, automatic_tags, clear_all_tags) {
    let remove_id = /ðŸ†”\s[\w,]+[ \t]*/g;
    sel = sel.replaceAll(remove_id, "");
    let remove_block = /â›”\s[\w,]+[ \t]*/g;
    sel = sel.replaceAll(remove_block, "");
    let cleaned_text = [];
    for (let line of sel.split(/\r?\n/)) {
      let parsed = this.parseLine(line);
      if (parsed.is_task) {
        if (clear_all_tags) {
          cleaned_text.push(parsed.task_prefix + parsed.removeAllTags());
        } else {
          cleaned_text.push(parsed.task_prefix + parsed.removeTags(automatic_tags));
        }
      } else {
        cleaned_text.push(parsed.line_text);
      }
    }
    return cleaned_text.join("\n");
  }
  static getBlockEnd(editor) {
    let blockEnd = editor.getCursor().line;
    if (blockEnd >= editor.lineCount() - 1)
      return blockEnd + 1;
    blockEnd += 1;
    while (!BLOCK_BOUNDARY.test(editor.getLine(blockEnd))) {
      blockEnd++;
      if (blockEnd > editor.lineCount() - 1)
        return blockEnd;
    }
    return blockEnd;
  }
  static getBlockStart(editor) {
    let blockStart = editor.getCursor().line;
    if (BLOCK_BOUNDARY.test(editor.getLine(blockStart))) {
      return Math.min(editor.lineCount() - 1, blockStart + 1);
    }
    while (blockStart > 0 && !BLOCK_BOUNDARY.test(editor.getLine(blockStart - 1))) {
      blockStart--;
    }
    return blockStart;
  }
  static getAllBlockStarts(editor) {
    let blocks = [0];
    let section = /^#?\s\w+/;
    for (let line_number = 0; line_number < editor.lineCount(); line_number++) {
      if (section.test(editor.getLine(line_number))) {
        if (line_number > 0) {
          blocks.push(line_number);
        }
      }
    }
    return blocks;
  }
  static getSectionName(editor, file_name) {
    let section_start = Helper.getBlockStart(editor);
    if (section_start == 0) {
      return file_name;
    } else {
      return editor.getLine(section_start - 1);
    }
  }
  static addTaskIDs(sel, prefix, automatic_tags, parallel, use_prefix, random_id_length, sequential_start) {
    sel = Helper.clearBlockIDs(sel, automatic_tags, false);
    if (DEBUG)
      console.log(`Replaced ids and blocks to give: ${sel}`);
    let lines = "";
    let first = true;
    let idx = 0;
    let nesting_ids = ["0:ERROR!"];
    let current_nesting = 0;
    let is_parallel = false;
    let this_id;
    for (const line of sel.split(/\r?\n/)) {
      let match = this.parseLine(line);
      if (!first) {
        lines += "\n";
      }
      if (match.is_task) {
        if (parallel) {
          let nesting_depth = match.nesting;
          if (nesting_depth > current_nesting) {
            current_nesting += 1;
            is_parallel = true;
            nesting_ids.push(``);
          } else if (nesting_depth < current_nesting) {
            while (current_nesting > nesting_depth) {
              current_nesting -= 1;
              let nested = nesting_ids.pop();
              if (nested) {
                nesting_ids[nesting_ids.length - 1] += `,${nested}`;
              }
              is_parallel = current_nesting > 0;
            }
          }
        }
        let this_line;
        if (use_prefix) {
          this_id = `${prefix}${Helper.generateRandomDigits(random_id_length)}`;
        } else {
          this_id = `${prefix}${idx + sequential_start}`;
        }
        let cleaned_line = match.line_text;
        if (cleaned_line != "")
          cleaned_line += " ";
        this_line = `${match.task_prefix}${cleaned_line}\u{1F194} ${this_id}`;
        if (idx > 0) {
          if (is_parallel) {
            this_line += ` \u26D4 ${nesting_ids[current_nesting - 1]}`;
          } else {
            this_line += ` \u26D4 ${nesting_ids[nesting_ids.length - 1]}`;
          }
        }
        for (const tag of automatic_tags) {
          let tag_text = ` #${tag}`;
          if (this_line.indexOf(tag_text) < 0) {
            this_line += tag_text;
          }
        }
        lines += this_line;
        idx += 1;
        if (is_parallel) {
          if (nesting_ids[nesting_ids.length - 1])
            nesting_ids[nesting_ids.length - 1] += ",";
          nesting_ids[nesting_ids.length - 1] += `${this_id}`;
        } else {
          nesting_ids[nesting_ids.length - 1] = this_id;
        }
        if (DEBUG)
          console.log(`Nesting level ${current_nesting}, ids ${nesting_ids}`);
      } else {
        lines += match.line_text;
      }
      first = false;
    }
    return lines;
  }
  static blockUpdate(editor, filename, add_ids, settings) {
    const prefix = this.getPrefix(editor, filename, settings);
    const line = editor.getLine(editor.getCursor().line);
    let blockStart = Helper.getBlockStart(editor);
    let blockEnd = Helper.getBlockEnd(editor);
    let last_line_length = editor.getLine(blockEnd + 1).length;
    const blockContent = editor.getRange({ line: blockStart, ch: 0 }, { line: blockEnd, ch: last_line_length });
    if (DEBUG)
      console.log(`Start ${blockStart}, End ${blockEnd}, last length ${last_line_length}
Orig: ${blockContent}`);
    let lines;
    if (add_ids) {
      lines = Helper.addTaskIDs(
        blockContent,
        prefix,
        settings.automaticTagNames,
        settings.nestedTaskBehavior == "1" /* ParallelExecution */,
        settings.idPrefixMethod == "1" /* UsePrefix */,
        settings.randomIDLength,
        settings.sequentialStartNumber
      );
    } else {
      lines = Helper.clearBlockIDs(
        blockContent,
        settings.automaticTagNames,
        settings.clearAllTags
      );
    }
    if (DEBUG)
      console.log(`Start ${blockStart}, End ${blockEnd}, last length ${last_line_length}
Orig: ${blockContent}
New: ${lines}`);
    editor.replaceRange(lines, { line: blockStart, ch: 0 }, { line: blockEnd, ch: last_line_length });
  }
  static getEntireConvertedFile(editor, filename, settings) {
    let initial_cursor = editor.getCursor();
    for (let block_start of this.getAllBlockStarts(editor)) {
      editor.setCursor({ line: block_start, ch: 0 });
      this.blockUpdate(editor, filename, true, settings);
    }
    editor.setCursor({ line: initial_cursor.line, ch: initial_cursor.ch });
  }
  static parseLine(line) {
    const regex = /^(\s*-\s\[([ x\-\/])\]\s)?(.*)$/;
    let match = regex.exec(line);
    if (match) {
      if (match[1]) {
        return new ParsedLine(true, match[2], match[3], this.getNestingLevel(line));
      } else {
        return new ParsedLine(false, "", match[3], 0);
      }
    } else {
      throw new Error(`Line was not understood: "${line}"`);
    }
  }
  static getPrefix(editor, filename, settings) {
    let raw_prefix;
    switch (settings.idPrefixMethod) {
      case "1" /* UsePrefix */: {
        raw_prefix = settings.projectPrefix;
        break;
      }
      case "3" /* FileName */: {
        raw_prefix = filename;
        break;
      }
      case "2" /* SectionName */: {
        raw_prefix = Helper.getSectionName(editor, filename);
      }
    }
    return Helper.getPrefixFromString(raw_prefix, settings.firstLettersOfWords, settings.removeVowels);
  }
  static getPrefixFromString(text, first_letters, remove_vowels) {
    text = text.replaceAll(/[#\[\]]/g, "");
    let words = text.split(/\s+/);
    text = "";
    for (let word of words) {
      if (word) {
        text = `${text}${word[0].toUpperCase()}`;
        if (!first_letters) {
          let remainder = word.slice(1);
          if (remove_vowels) {
            remainder = remainder.replaceAll(/[aeiou]/g, "");
          }
          text = `${text}${remainder}`;
        }
      }
    }
    text = text.replaceAll(" ", "");
    return text;
  }
};

// main.ts
var DEBUG2 = true;
var ProjectTasks = class extends import_obsidian.Plugin {
  async onload() {
    if (DEBUG2)
      console.log("Project Tasks starting");
    await this.loadSettings();
    this.addCommand({
      id: "set-ids",
      name: "Set project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = Helper.addTaskIDs(sel, Helper.getPrefix(editor, this.getFilename(view), this.settings), this.settings.automaticTagNames, this.settings.nestedTaskBehavior == "1" /* ParallelExecution */, this.settings.idPrefixMethod == "1" /* UsePrefix */, this.settings.randomIDLength, this.settings.sequentialStartNumber);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "clear-ids",
      name: "Clear project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = Helper.clearBlockIDs(sel, this.settings.automaticTagNames, this.settings.clearAllTags);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "set-ids-block",
      name: "Set project ids on Block",
      editorCallback: (editor, view) => {
        Helper.blockUpdate(editor, this.getFilename(view), true, this.settings);
      }
    });
    this.addCommand({
      id: "clear-ids-block",
      name: "Clear project ids on Block",
      editorCallback: (editor, view) => {
        Helper.blockUpdate(editor, this.getFilename(view), false, this.settings);
      }
    });
    this.addCommand({
      id: "add-project-task-list",
      name: "Add active project task list",
      editorCallback: (editor, view) => {
        this.addActiveProjectList(editor);
      }
    });
    this.addCommand({
      id: "clear-ids-file",
      name: "Clear project ids in entire file",
      editorCallback: (editor, view) => {
        let last_line = editor.lineCount();
        let range_from = { line: 0, ch: 0 };
        let range_to = { line: last_line, ch: editor.getLine(last_line).length };
        let sel = editor.getRange(range_from, range_to);
        let lines = Helper.clearBlockIDs(sel, this.settings.automaticTagNames, this.settings.clearAllTags);
        editor.replaceRange(
          `${lines}`,
          range_from,
          range_to
        );
      }
    });
    this.addSettingTab(new ProjectTasksSettingsTab(this.app, this));
  }
  addActiveProjectList(editor) {
    const active_tasks_view = `\`\`\`tasks
tags includes #${this.settings.automaticTagNames}
not done
hide backlink
is not blocked
\`\`\``;
    editor.replaceSelection(active_tasks_view);
  }
  getFilename(view) {
    var _a;
    if (!((_a = view.file) == null ? void 0 : _a.name)) {
      return this.settings.projectPrefix;
    } else {
      return view.file.name.split(".")[0];
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ProjectTasksSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Project ID method").setDesc("Choose how the ID will be determined").addDropdown((dropDown) => {
      dropDown.addOption("1", "Use prefix");
      dropDown.addOption("2", "Use Section name");
      dropDown.addOption("3", "Use filename").setValue(this.plugin.settings.idPrefixMethod).onChange(async (value) => {
        this.plugin.settings.idPrefixMethod = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Project ID prefix").setDesc("Prefix to use when creating an ID for a task").addText((text) => text.setPlaceholder("ID prefix").setValue(this.plugin.settings.projectPrefix).onChange(async (value) => {
      this.plugin.settings.projectPrefix = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Length of random ID number").setDesc("How many digits to use for random ID when using a fixed prefix").addSlider((text) => text.setValue(this.plugin.settings.randomIDLength).setLimits(3, 6, 1).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.randomIDLength = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Initial sequential ID number").setDesc("Start number for sequential ID's").addSlider((text) => text.setValue(this.plugin.settings.sequentialStartNumber).setLimits(0, 1, 1).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.sequentialStartNumber = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove vowels").setDesc("Remove vowels from the prefix when getting from the filename or block name").addToggle((text) => text.setValue(this.plugin.settings.removeVowels).onChange(async (value) => {
      this.plugin.settings.removeVowels = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("First letter of words").setDesc("Only use the first letter of words to form the prefix").addToggle((text) => text.setValue(this.plugin.settings.firstLettersOfWords).onChange(async (value) => {
      this.plugin.settings.firstLettersOfWords = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Automatically add tags").setDesc("A list of tags (one per line) to add to each task - do not include the # symbol").addTextArea((text) => {
      text.setValue(this.plugin.settings.automaticTagNames.join("\n")).onChange((value) => {
        this.plugin.settings.automaticTagNames = value.split("\n").filter((line) => line.trim() !== "");
        this.plugin.saveSettings();
      }).then((textArea) => {
        textArea.inputEl.style.width = "100%";
        textArea.inputEl.rows = 5;
      });
    });
    new import_obsidian.Setting(containerEl).setName("Clear all tags from project tasks").setDesc("When clearing tags from project tasks clear all existing tags not just the automatically added ones").addToggle((text) => text.setValue(this.plugin.settings.clearAllTags).onChange(async (value) => {
      this.plugin.settings.clearAllTags = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Nested tags behaviour").setDesc("Determines whether nested tags will create parallel execution tags or sequential").addDropdown((dropDown) => {
      dropDown.addOption("1", "Parallel Execution");
      dropDown.addOption("2", "Sequential Execution").setValue(this.plugin.settings.nestedTaskBehavior).onChange(async (value) => {
        this.plugin.settings.nestedTaskBehavior = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJoZWxwZXJzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQge0FwcCwgRWRpdG9yLCBNYXJrZG93bkZpbGVJbmZvLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmd9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBIZWxwZXIsIHtERUZBVUxUX1NFVFRJTkdTLCBOZXN0aW5nQmVoYXZpb3VyLCBQcmVmaXhNZXRob2QsIFByb2plY3RUYXNrc1NldHRpbmdzfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbi8vIFR1cm4gb24gdG8gYWxsb3cgZGVidWdnaW5nIGluIHRoZSBjb25zb2xlXG5jb25zdCBERUJVRyA9IHRydWU7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvamVjdFRhc2tzIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBzZXR0aW5nczogUHJvamVjdFRhc2tzU2V0dGluZ3M7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGlmIChERUJVRykgY29uc29sZS5sb2coJ1Byb2plY3QgVGFza3Mgc3RhcnRpbmcnKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJzZXQtaWRzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIlNldCBwcm9qZWN0IGlkcyBvbiBTZWxlY3Rpb25cIixcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yLCB2aWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBsZXQgbGluZXMgPSBIZWxwZXIuYWRkVGFza0lEcyhzZWwsIEhlbHBlci5nZXRQcmVmaXgoZWRpdG9yLCB0aGlzLmdldEZpbGVuYW1lKHZpZXcpLCB0aGlzLnNldHRpbmdzKSwgdGhpcy5zZXR0aW5ncy5hdXRvbWF0aWNUYWdOYW1lcywgdGhpcy5zZXR0aW5ncy5uZXN0ZWRUYXNrQmVoYXZpb3IgPT0gTmVzdGluZ0JlaGF2aW91ci5QYXJhbGxlbEV4ZWN1dGlvbiwgdGhpcy5zZXR0aW5ncy5pZFByZWZpeE1ldGhvZCA9PSBQcmVmaXhNZXRob2QuVXNlUHJlZml4LCB0aGlzLnNldHRpbmdzLnJhbmRvbUlETGVuZ3RoLCB0aGlzLnNldHRpbmdzLnNlcXVlbnRpYWxTdGFydE51bWJlcik7XG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgIGAke2xpbmVzfWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6IFwiY2xlYXItaWRzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIkNsZWFyIHByb2plY3QgaWRzIG9uIFNlbGVjdGlvblwiLFxuICAgICAgICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3IsIHZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2VsID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIGxldCBsaW5lcyA9IEhlbHBlci5jbGVhckJsb2NrSURzKHNlbCwgdGhpcy5zZXR0aW5ncy5hdXRvbWF0aWNUYWdOYW1lcywgdGhpcy5zZXR0aW5ncy5jbGVhckFsbFRhZ3MpO1xuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICBgJHtsaW5lc31gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcInNldC1pZHMtYmxvY2tcIixcbiAgICAgICAgICAgIG5hbWU6IFwiU2V0IHByb2plY3QgaWRzIG9uIEJsb2NrXCIsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvciwgdmlldykgPT4ge1xuICAgICAgICAgICAgICAgIEhlbHBlci5ibG9ja1VwZGF0ZShlZGl0b3IsIHRoaXMuZ2V0RmlsZW5hbWUodmlldyksIHRydWUsIHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJjbGVhci1pZHMtYmxvY2tcIixcbiAgICAgICAgICAgIG5hbWU6IFwiQ2xlYXIgcHJvamVjdCBpZHMgb24gQmxvY2tcIixcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yLCB2aWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgSGVscGVyLmJsb2NrVXBkYXRlKGVkaXRvciwgdGhpcy5nZXRGaWxlbmFtZSh2aWV3KSwgZmFsc2UsIHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJhZGQtcHJvamVjdC10YXNrLWxpc3RcIixcbiAgICAgICAgICAgIG5hbWU6IFwiQWRkIGFjdGl2ZSBwcm9qZWN0IHRhc2sgbGlzdFwiLFxuICAgICAgICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3IsIHZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEFjdGl2ZVByb2plY3RMaXN0KGVkaXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcImNsZWFyLWlkcy1maWxlXCIsXG4gICAgICAgICAgICBuYW1lOiBcIkNsZWFyIHByb2plY3QgaWRzIGluIGVudGlyZSBmaWxlXCIsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvciwgdmlldykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBsYXN0X2xpbmUgPSBlZGl0b3IubGluZUNvdW50KClcbiAgICAgICAgICAgICAgICBsZXQgcmFuZ2VfZnJvbSA9IHtsaW5lOiAwLCBjaDogMH1cbiAgICAgICAgICAgICAgICBsZXQgcmFuZ2VfdG8gPSB7bGluZTogbGFzdF9saW5lLCBjaDogZWRpdG9yLmdldExpbmUobGFzdF9saW5lKS5sZW5ndGh9XG4gICAgICAgICAgICAgICAgbGV0IHNlbCA9IGVkaXRvci5nZXRSYW5nZShyYW5nZV9mcm9tLCByYW5nZV90byk7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmVzID0gSGVscGVyLmNsZWFyQmxvY2tJRHMoc2VsLCB0aGlzLnNldHRpbmdzLmF1dG9tYXRpY1RhZ05hbWVzLCB0aGlzLnNldHRpbmdzLmNsZWFyQWxsVGFncyk7XG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShcbiAgICAgICAgICAgICAgICAgICAgYCR7bGluZXN9YCxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VfZnJvbSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VfdG9cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgUHJvamVjdFRhc2tzU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgIH1cblxuICAgIGFkZEFjdGl2ZVByb2plY3RMaXN0KGVkaXRvcjogRWRpdG9yKSB7XG4gICAgICAgIC8vIEEgdmlldyB0byBzaG93IGFjdGl2ZSB0YXNrc1xuICAgICAgICBjb25zdCBhY3RpdmVfdGFza3NfdmlldyA9IGBcXGBcXGBcXGB0YXNrc1xudGFncyBpbmNsdWRlcyAjJHt0aGlzLnNldHRpbmdzLmF1dG9tYXRpY1RhZ05hbWVzfVxubm90IGRvbmVcbmhpZGUgYmFja2xpbmtcbmlzIG5vdCBibG9ja2VkXG5cXGBcXGBcXGBgO1xuICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihhY3RpdmVfdGFza3Nfdmlldyk7XG4gICAgfVxuXG5cblxuICAgIGdldEZpbGVuYW1lKHZpZXc6IE1hcmtkb3duRmlsZUluZm8pIHtcbiAgICAgICAgaWYgKCF2aWV3LmZpbGU/Lm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnByb2plY3RQcmVmaXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldy5maWxlLm5hbWUuc3BsaXQoJy4nKVswXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9udW5sb2FkKCkge1xuXG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxufVxuXG5cbmNsYXNzIFByb2plY3RUYXNrc1NldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBQcm9qZWN0VGFza3M7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBQcm9qZWN0VGFza3MpIHtcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1Byb2plY3QgSUQgbWV0aG9kJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdDaG9vc2UgaG93IHRoZSBJRCB3aWxsIGJlIGRldGVybWluZWQnKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3BEb3duID0+IHtcbiAgICAgICAgICAgICAgICBkcm9wRG93bi5hZGRPcHRpb24oJzEnLCAnVXNlIHByZWZpeCcpO1xuICAgICAgICAgICAgICAgIGRyb3BEb3duLmFkZE9wdGlvbignMicsICdVc2UgU2VjdGlvbiBuYW1lJyk7XG4gICAgICAgICAgICAgICAgZHJvcERvd24uYWRkT3B0aW9uKCczJywgJ1VzZSBmaWxlbmFtZScpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pZFByZWZpeE1ldGhvZClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWRQcmVmaXhNZXRob2QgPSB2YWx1ZSBhcyBQcmVmaXhNZXRob2Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1Byb2plY3QgSUQgcHJlZml4JylcbiAgICAgICAgICAgIC5zZXREZXNjKCdQcmVmaXggdG8gdXNlIHdoZW4gY3JlYXRpbmcgYW4gSUQgZm9yIGEgdGFzaycpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0lEIHByZWZpeCcpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb2plY3RQcmVmaXgpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm9qZWN0UHJlZml4ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdMZW5ndGggb2YgcmFuZG9tIElEIG51bWJlcicpXG4gICAgICAgICAgICAuc2V0RGVzYygnSG93IG1hbnkgZGlnaXRzIHRvIHVzZSBmb3IgcmFuZG9tIElEIHdoZW4gdXNpbmcgYSBmaXhlZCBwcmVmaXgnKVxuICAgICAgICAgICAgLmFkZFNsaWRlcih0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmFuZG9tSURMZW5ndGgpXG4gICAgICAgICAgICAgICAgLnNldExpbWl0cygzLCA2LCAxKVxuICAgICAgICAgICAgICAgIC5zZXREeW5hbWljVG9vbHRpcCgpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yYW5kb21JRExlbmd0aCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnSW5pdGlhbCBzZXF1ZW50aWFsIElEIG51bWJlcicpXG4gICAgICAgICAgICAuc2V0RGVzYygnU3RhcnQgbnVtYmVyIGZvciBzZXF1ZW50aWFsIElEXFwncycpXG4gICAgICAgICAgICAuYWRkU2xpZGVyKHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZXF1ZW50aWFsU3RhcnROdW1iZXIpXG4gICAgICAgICAgICAgICAgLnNldExpbWl0cygwLCAxLCAxKVxuICAgICAgICAgICAgICAgIC5zZXREeW5hbWljVG9vbHRpcCgpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZXF1ZW50aWFsU3RhcnROdW1iZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1JlbW92ZSB2b3dlbHMnKVxuICAgICAgICAgICAgLnNldERlc2MoJ1JlbW92ZSB2b3dlbHMgZnJvbSB0aGUgcHJlZml4IHdoZW4gZ2V0dGluZyBmcm9tIHRoZSBmaWxlbmFtZSBvciBibG9jayBuYW1lJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnJlbW92ZVZvd2VscylcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlbW92ZVZvd2VscyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRmlyc3QgbGV0dGVyIG9mIHdvcmRzJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdPbmx5IHVzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIHdvcmRzIHRvIGZvcm0gdGhlIHByZWZpeCcpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maXJzdExldHRlcnNPZldvcmRzKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZmlyc3RMZXR0ZXJzT2ZXb3JkcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdBdXRvbWF0aWNhbGx5IGFkZCB0YWdzJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdBIGxpc3Qgb2YgdGFncyAob25lIHBlciBsaW5lKSB0byBhZGQgdG8gZWFjaCB0YXNrIC0gZG8gbm90IGluY2x1ZGUgdGhlICMgc3ltYm9sJylcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSgodGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIHRleHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b21hdGljVGFnTmFtZXMuam9pbignXFxuJykpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG9tYXRpY1RhZ05hbWVzID0gdmFsdWUuc3BsaXQoJ1xcbicpLmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpICE9PSAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbih0ZXh0QXJlYSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBcmVhLmlucHV0RWwuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFyZWEuaW5wdXRFbC5yb3dzID0gNTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0NsZWFyIGFsbCB0YWdzIGZyb20gcHJvamVjdCB0YXNrcycpXG4gICAgICAgICAgICAuc2V0RGVzYygnV2hlbiBjbGVhcmluZyB0YWdzIGZyb20gcHJvamVjdCB0YXNrcyBjbGVhciBhbGwgZXhpc3RpbmcgdGFncyBub3QganVzdCB0aGUgYXV0b21hdGljYWxseSBhZGRlZCBvbmVzJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNsZWFyQWxsVGFncylcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNsZWFyQWxsVGFncyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnTmVzdGVkIHRhZ3MgYmVoYXZpb3VyJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdEZXRlcm1pbmVzIHdoZXRoZXIgbmVzdGVkIHRhZ3Mgd2lsbCBjcmVhdGUgcGFyYWxsZWwgZXhlY3V0aW9uIHRhZ3Mgb3Igc2VxdWVudGlhbCcpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcERvd24gPT4ge1xuICAgICAgICAgICAgICAgIGRyb3BEb3duLmFkZE9wdGlvbignMScsICdQYXJhbGxlbCBFeGVjdXRpb24nKTtcbiAgICAgICAgICAgICAgICBkcm9wRG93bi5hZGRPcHRpb24oJzInLCAnU2VxdWVudGlhbCBFeGVjdXRpb24nKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubmVzdGVkVGFza0JlaGF2aW9yKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5uZXN0ZWRUYXNrQmVoYXZpb3IgPSB2YWx1ZSBhcyBOZXN0aW5nQmVoYXZpb3VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuXG5cbiAgICB9XG59XG5cbiIsICIvLyBSZWdleCBmb3IgYmxvY2sgYm91bmRhcnlcbmltcG9ydCB7RWRpdG9yLCBNYXJrZG93bkZpbGVJbmZvfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuY29uc3QgQkxPQ0tfQk9VTkRBUlkgPSAvXiMrXFxzLztcbmNvbnN0IERFQlVHID0gdHJ1ZTtcblxuXG5leHBvcnQgZW51bSBQcmVmaXhNZXRob2Qge1xuICAgIFVzZVByZWZpeCA9ICcxJyxcbiAgICBTZWN0aW9uTmFtZSA9ICcyJyxcbiAgICBGaWxlTmFtZSA9ICczJ1xufVxuXG5leHBvcnQgZW51bSBOZXN0aW5nQmVoYXZpb3VyIHtcbiAgICBQYXJhbGxlbEV4ZWN1dGlvbiA9ICcxJyxcbiAgICBTZXF1ZW50aWFsRXhlY3V0aW9uID0gJzInLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3RUYXNrc1NldHRpbmdzIHtcbiAgICBpZFByZWZpeE1ldGhvZDogUHJlZml4TWV0aG9kO1xuICAgIHByb2plY3RQcmVmaXg6IHN0cmluZztcbiAgICByYW5kb21JRExlbmd0aDogbnVtYmVyO1xuICAgIHNlcXVlbnRpYWxTdGFydE51bWJlcjogbnVtYmVyO1xuICAgIHJlbW92ZVZvd2VsczogYm9vbGVhbjtcbiAgICBmaXJzdExldHRlcnNPZldvcmRzOiBib29sZWFuO1xuICAgIGF1dG9tYXRpY1RhZ05hbWVzOiBzdHJpbmdbXTtcbiAgICBjbGVhckFsbFRhZ3M6IGJvb2xlYW47XG4gICAgbmVzdGVkVGFza0JlaGF2aW9yOiBOZXN0aW5nQmVoYXZpb3VyO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogUHJvamVjdFRhc2tzU2V0dGluZ3MgPSB7XG4gICAgaWRQcmVmaXhNZXRob2Q6IFByZWZpeE1ldGhvZC5Vc2VQcmVmaXgsXG4gICAgcHJvamVjdFByZWZpeDogJ3ByaicsXG4gICAgcmFuZG9tSURMZW5ndGg6IDYsXG4gICAgc2VxdWVudGlhbFN0YXJ0TnVtYmVyOiAxLFxuICAgIHJlbW92ZVZvd2VsczogZmFsc2UsXG4gICAgZmlyc3RMZXR0ZXJzT2ZXb3JkczogZmFsc2UsXG4gICAgYXV0b21hdGljVGFnTmFtZXM6IFtcIlByb2plY3RcIl0sXG4gICAgY2xlYXJBbGxUYWdzOiBmYWxzZSxcbiAgICBuZXN0ZWRUYXNrQmVoYXZpb3I6IE5lc3RpbmdCZWhhdmlvdXIuUGFyYWxsZWxFeGVjdXRpb24sXG59XG5cbmludGVyZmFjZSBTaW1wbGVDdXJzb3Ige1xuICAgIGxpbmU6IG51bWJlclxuICAgIGNoOiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIFNpbXBsZUVkaXRvciB7XG4gICAgLy8gVGhpcyBpbnRlcmZhY2UgaXMgY3JlYXRlZCB0byBoZWxwIHdpdGggdGhlIGZ1bmN0aW9ucyBoZXJlIHRoYXQgbmVlZCB0aGUgT2JzaWRpYW4gRWRpdG9yXG4gICAgZ2V0Q3Vyc29yKCk6IFNpbXBsZUN1cnNvcjtcbiAgICBnZXRMaW5lKG46IG51bWJlcik6IHN0cmluZztcbiAgICBsaW5lQ291bnQoKTogbnVtYmVyO1xuICAgIGdldFJhbmdlKHN0YXJ0OiB7bGluZTogbnVtYmVyLCBjaDogbnVtYmVyfSwgZW5kOiB7bGluZTogbnVtYmVyLCBjaDogbnVtYmVyfSk6IHN0cmluZztcbiAgICByZXBsYWNlUmFuZ2UodGV4dDogc3RyaW5nLCBzdGFydDoge2xpbmU6IG51bWJlciwgY2g6IG51bWJlcn0sIGVuZDoge2xpbmU6IG51bWJlciwgY2g6IG51bWJlcn0pOiB2b2lkO1xuICAgIHNldEN1cnNvcihjdXJzb3I6IHtsaW5lOiBudW1iZXIsIGNoOiBudW1iZXJ9KTogdm9pZDtcbn1cblxuLy8gVG9EbzogbmVlZCB0byByZWZhY3RvciB0byBhbGxvdyBwYXNzaW5nIHRoZSBzZXR0aW5ncyBvYmplY3QgYXJvdW5kIHNvIHRoYXQgd2UgY2FuIG1vcmUgZWFzaWx5IGJyZWFrIGFwYXJ0IHRoZSBkb0Jsb2NrVXBkYXRlXG5cblxuY2xhc3MgUGFyc2VkTGluZSB7XG4gICAgcHVibGljIHRhc2tfcHJlZml4OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaXNfdGFzazogYm9vbGVhbiwgcHVibGljIHN0YXR1c190eXBlOiBzdHJpbmcsIHB1YmxpYyBsaW5lX3RleHQ6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBwdWJsaWMgbmVzdGluZzogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzX3Rhc2spIHtcbiAgICAgICAgICAgIGxldCBpbmRlbnRzID0gJ1xcdCcucmVwZWF0KG5lc3RpbmcpO1xuICAgICAgICAgICAgdGhpcy50YXNrX3ByZWZpeCA9IGAke2luZGVudHN9LSBbJHtzdGF0dXNfdHlwZX1dIGA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tfcHJlZml4ID0gJyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRMaW5lU3BsaXQobGluZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBsaW5lLnNwbGl0KC8oXFxzKykvKTtcbiAgICB9XG5cbiAgICByZW1vdmVBbGxUYWdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVUYWdzKCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlVGFncyh0YWdzX3RvX3JlbW92ZT86IHN0cmluZ1tdKSB7XG4gICAgICAgIGxldCB3b3JkcyA9IHRoaXMuZ2V0TGluZVNwbGl0KHRoaXMubGluZV90ZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgd29yZHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgbGV0IHdvcmQgPSB3b3Jkc1tpZHhdO1xuICAgICAgICAgICAgaWYgKHdvcmQudHJpbSgpLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQgaXMgYSB2YWxpZCB0YWcgd2Ugc2hvdWxkIGJlIHJlbW92aW5nXG4gICAgICAgICAgICAgICAgbGV0IGlzX3ZhbGlkX3RhZyA9IHdvcmQuc3RhcnRzV2l0aCgnIycpICYmICghdGFnc190b19yZW1vdmUgfHwgdGFnc190b19yZW1vdmUuaW5kZXhPZih3b3JkLnNsaWNlKDEpKSA+PSAwKVxuICAgICAgICAgICAgICAgIGlmIChpc192YWxpZF90YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgaXMgYSB0YWcsIHNvIGRvIG5vdCBpbmNsdWRlIGl0IGFuZCBlYXQgdGhlIHByZXZpb3VzIG9yIGZvbGxvd2luZyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIHdvcmRzW2lkeF0gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3Jkc1tpZHggLSAxXSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlkeCAhPSB3b3Jkcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3Jkc1tpZHggKyAxXSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdhcyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgaWYgKGlkeCA9PSB3b3Jkcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBpZ25vcmUgdGhpc1xuICAgICAgICAgICAgICAgICAgICB3b3Jkc1tpZHhdID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3b3Jkcy5qb2luKCcnKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlbHBlciB7XG4gICAgLy8gU2ltcGxlIGhlbHBlciBjbGFzcyB0aGF0IGNvbnRhaW5zIHRoZSBidXNpbmVzcyBsb2dpY1xuICAgIC8vIG9mIHRoZSBhcHAuIFRoaXMgaXMgZXh0cmFjdGVkIGhlcmUgdG8gYWxsb3cgdW5pdCB0ZXN0aW5nXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldE5lc3RpbmdMZXZlbCh0YXNrX21hcmtlcjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgLy8gVGhlIG5lc3RpbmcgbGV2ZWwgaXMgdGhlIG51bWJlciBvZiBzcGFjZXMgYmVmb3JlIHRoZSBmaXJzdCBcIi1cIiBjaGFyYWN0ZXJcbiAgICAgICAgbGV0IHBhcnRzID0gdGFza19tYXJrZXIucmVwbGFjZUFsbChcIlxcblwiLCBcIlwiKS5zcGxpdChcIi1cIik7XG4gICAgICAgIHJldHVybiBwYXJ0c1swXS5sZW5ndGg7XG4gICAgfVxuXG4gICAgc3RhdGljIGdlbmVyYXRlUmFuZG9tRGlnaXRzKGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgIGNvbnN0IGRpZ2l0cyA9ICcwMTIzNDU2Nzg5JztcbiAgICAgIGxldCByYW5kb21TdHJpbmcgPSAnJztcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGRpZ2l0cy5sZW5ndGgpO1xuICAgICAgICByYW5kb21TdHJpbmcgKz0gZGlnaXRzW3JhbmRvbUluZGV4XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJhbmRvbVN0cmluZztcbiAgICB9XG5cbiAgICBzdGF0aWMgY2xlYXJCbG9ja0lEcyhzZWw6IHN0cmluZywgYXV0b21hdGljX3RhZ3M6IHN0cmluZ1tdLCBjbGVhcl9hbGxfdGFnczogYm9vbGVhbikge1xuICAgICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgSUQnc1xuICAgICAgICBsZXQgcmVtb3ZlX2lkID0gL1x1RDgzQ1x1REQ5NFxcc1tcXHcsXStbIFxcdF0qL2c7XG4gICAgICAgIHNlbCA9IHNlbC5yZXBsYWNlQWxsKHJlbW92ZV9pZCwgJycpO1xuXG4gICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBCbG9ja3NcbiAgICAgICAgbGV0IHJlbW92ZV9ibG9jayA9IC9cdTI2RDRcXHNbXFx3LF0rWyBcXHRdKi9nO1xuICAgICAgICBzZWwgPSBzZWwucmVwbGFjZUFsbChyZW1vdmVfYmxvY2ssICcnKTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIHRhZ3NcbiAgICAgICAgbGV0IGNsZWFuZWRfdGV4dCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBsaW5lIG9mIHNlbC5zcGxpdCgvXFxyP1xcbi8pKSB7XG4gICAgICAgICAgICBsZXQgcGFyc2VkID0gdGhpcy5wYXJzZUxpbmUobGluZSk7XG4gICAgICAgICAgICBpZiAocGFyc2VkLmlzX3Rhc2spIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xlYXJfYWxsX3RhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5lZF90ZXh0LnB1c2gocGFyc2VkLnRhc2tfcHJlZml4ICsgcGFyc2VkLnJlbW92ZUFsbFRhZ3MoKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5lZF90ZXh0LnB1c2gocGFyc2VkLnRhc2tfcHJlZml4ICsgcGFyc2VkLnJlbW92ZVRhZ3MoYXV0b21hdGljX3RhZ3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsZWFuZWRfdGV4dC5wdXNoKHBhcnNlZC5saW5lX3RleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsZWFuZWRfdGV4dC5qb2luKCdcXG4nKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0QmxvY2tFbmQoZWRpdG9yOiBTaW1wbGVFZGl0b3IpIHtcbiAgICAgICAgLy8gRmluZCB0aGUgZW5kIG9mIHRoZSBibG9ja1xuICAgICAgICBsZXQgYmxvY2tFbmQgPSBlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZTtcbiAgICAgICAgaWYgKGJsb2NrRW5kID49IGVkaXRvci5saW5lQ291bnQoKSAtIDEpIHJldHVybiBibG9ja0VuZCArIDE7XG4gICAgICAgIGJsb2NrRW5kICs9IDE7XG4gICAgICAgIHdoaWxlICghQkxPQ0tfQk9VTkRBUlkudGVzdChlZGl0b3IuZ2V0TGluZShibG9ja0VuZCkpKSB7XG4gICAgICAgICAgICBibG9ja0VuZCsrO1xuICAgICAgICAgICAgaWYgKGJsb2NrRW5kID4gZWRpdG9yLmxpbmVDb3VudCgpIC0gMSkgcmV0dXJuIGJsb2NrRW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibG9ja0VuZDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0QmxvY2tTdGFydChlZGl0b3I6IFNpbXBsZUVkaXRvcikge1xuICAgICAgICAvLyBGaW5kIHRoZSBzdGFydCBvZiB0aGUgYmxvY2tcbiAgICAgICAgbGV0IGJsb2NrU3RhcnQgPSBlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZTtcbiAgICAgICAgaWYgKEJMT0NLX0JPVU5EQVJZLnRlc3QoZWRpdG9yLmdldExpbmUoYmxvY2tTdGFydCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oZWRpdG9yLmxpbmVDb3VudCgpIC0xLCBibG9ja1N0YXJ0ICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGJsb2NrU3RhcnQgPiAwICYmICFCTE9DS19CT1VOREFSWS50ZXN0KGVkaXRvci5nZXRMaW5lKGJsb2NrU3RhcnQgLSAxKSkpIHtcbiAgICAgICAgICAgIGJsb2NrU3RhcnQtLTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmxvY2tTdGFydDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0QWxsQmxvY2tTdGFydHMoZWRpdG9yOiBTaW1wbGVFZGl0b3IpIHtcbiAgICAgICAgLy8gUmV0dXJuIGFsbCB0aGUgbGluZXMgdGhhdCBtYXJrIHRoZSBzdGFydCBvZiBhIGJsb2NrIGluIGEgZmlsZVxuICAgICAgICBsZXQgYmxvY2tzID0gWzBdO1xuICAgICAgICBsZXQgc2VjdGlvbiA9IC9eIz9cXHNcXHcrL1xuICAgICAgICBmb3IgKGxldCBsaW5lX251bWJlciA9IDA7IGxpbmVfbnVtYmVyIDwgZWRpdG9yLmxpbmVDb3VudCgpOyBsaW5lX251bWJlcisrKSB7XG4gICAgICAgICAgICBpZiAoc2VjdGlvbi50ZXN0KGVkaXRvci5nZXRMaW5lKGxpbmVfbnVtYmVyKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugd2hlbiB0aGUgZmlyc3QgbGluZSBpcyBhIHNlY3Rpb24gd2UgZG9uJ3QgaGF2ZSB0byBhZGQgaXRcbiAgICAgICAgICAgICAgICBpZiAobGluZV9udW1iZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGxpbmVfbnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmxvY2tzO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRTZWN0aW9uTmFtZShlZGl0b3I6IFNpbXBsZUVkaXRvciwgZmlsZV9uYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHNlY3Rpb25fc3RhcnQgPSBIZWxwZXIuZ2V0QmxvY2tTdGFydChlZGl0b3IpO1xuICAgICAgICBpZiAoc2VjdGlvbl9zdGFydCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZV9uYW1lXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZWRpdG9yLmdldExpbmUoc2VjdGlvbl9zdGFydC0xKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBhZGRUYXNrSURzKHNlbDogc3RyaW5nLCBwcmVmaXg6IHN0cmluZywgYXV0b21hdGljX3RhZ3M6IHN0cmluZ1tdLCBwYXJhbGxlbDogYm9vbGVhbiwgdXNlX3ByZWZpeDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICByYW5kb21faWRfbGVuZ3RoOiBudW1iZXIsIHNlcXVlbnRpYWxfc3RhcnQ6IG51bWJlcikge1xuICAgICAgICAvLyBDbGVhciBhbGwgdGhlIGV4aXN0aW5nIGJsb2NrIGFuZCBwcm9qZWN0IElEJ3NcbiAgICAgICAgc2VsID0gSGVscGVyLmNsZWFyQmxvY2tJRHMoc2VsLCBhdXRvbWF0aWNfdGFncywgZmFsc2UpO1xuXG4gICAgICAgIGlmIChERUJVRykgY29uc29sZS5sb2coYFJlcGxhY2VkIGlkcyBhbmQgYmxvY2tzIHRvIGdpdmU6ICR7c2VsfWApO1xuXG4gICAgICAgIGxldCBsaW5lcyA9IFwiXCI7XG4gICAgICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgICAgIGxldCBpZHggPSAwO1xuICAgICAgICBsZXQgbmVzdGluZ19pZHMgPSBbXCIwOkVSUk9SIVwiXTtcbiAgICAgICAgbGV0IGN1cnJlbnRfbmVzdGluZyA9IDA7XG4gICAgICAgIGxldCBpc19wYXJhbGxlbCA9IGZhbHNlO1xuICAgICAgICBsZXQgdGhpc19pZDtcblxuICAgICAgICAvLyBHbyB0aHJvdWdoIGFsbCB0aGUgbGluZXMgYW5kIGFkZCBhcHByb3ByaWF0ZSBJRCBhbmQgYmxvY2sgdGFnc1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2Ygc2VsLnNwbGl0KC9cXHI/XFxuLykpIHtcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IHRoaXMucGFyc2VMaW5lKGxpbmUpO1xuICAgICAgICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICAgICAgICAgIGxpbmVzICs9IFwiXFxuXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJcyB0aGlzIGEgdGFzayBsaW5lIGF0IGFsbD9cbiAgICAgICAgICAgIGlmIChtYXRjaC5pc190YXNrKSB7XG4gICAgICAgICAgICAgICAgLy8gV2F0Y2ggb3V0IGZvciBjaGFuZ2VzIGluIG5lc3RpbmdcbiAgICAgICAgICAgICAgICBpZiAocGFyYWxsZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5lc3RpbmdfZGVwdGggPSBtYXRjaC5uZXN0aW5nO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmVzdGluZ19kZXB0aCA+IGN1cnJlbnRfbmVzdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGEgbmV3IGxldmVsIG9mIG5lc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfbmVzdGluZyArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNfcGFyYWxsZWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmVzdGluZ19pZHMucHVzaChgYCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmVzdGluZ19kZXB0aCA8IGN1cnJlbnRfbmVzdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGxldmVscyBvZiBuZXN0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudF9uZXN0aW5nID4gbmVzdGluZ19kZXB0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfbmVzdGluZyAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXN0ZWQgPSBuZXN0aW5nX2lkcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVzdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RpbmdfaWRzW25lc3RpbmdfaWRzLmxlbmd0aCAtIDFdICs9IGAsJHtuZXN0ZWR9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNfcGFyYWxsZWwgPSBjdXJyZW50X25lc3RpbmcgPiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCB0aGlzX2xpbmU7XG4gICAgICAgICAgICAgICAgLy8gR2V0IGFuIGlkIHRvIHVzZVxuICAgICAgICAgICAgICAgIGlmICh1c2VfcHJlZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNfaWQgPSBgJHtwcmVmaXh9JHtIZWxwZXIuZ2VuZXJhdGVSYW5kb21EaWdpdHMocmFuZG9tX2lkX2xlbmd0aCl9YDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzX2lkID0gYCR7cHJlZml4fSR7aWR4ICsgc2VxdWVudGlhbF9zdGFydH1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGlkIGludG8gdGhlcmVcbiAgICAgICAgICAgICAgICBsZXQgY2xlYW5lZF9saW5lID0gbWF0Y2gubGluZV90ZXh0O1xuICAgICAgICAgICAgICAgIC8vIEFkZCBhIHNwYWNlIGF0IHRoZSBlbmQgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgaWYgKGNsZWFuZWRfbGluZSAhPSBcIlwiKSBjbGVhbmVkX2xpbmUgKz0gXCIgXCI7XG4gICAgICAgICAgICAgICAgdGhpc19saW5lID0gYCR7bWF0Y2gudGFza19wcmVmaXh9JHtjbGVhbmVkX2xpbmV9XHVEODNDXHVERDk0ICR7dGhpc19pZH1gO1xuICAgICAgICAgICAgICAgIGlmIChpZHggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgYmxvY2tzIGFmdGVyIHRoZSB2ZXJ5IGZpcnN0IHRhc2tcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX3BhcmFsbGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzX2xpbmUgKz0gYCBcdTI2RDQgJHtuZXN0aW5nX2lkc1tjdXJyZW50X25lc3RpbmcgLSAxXX1gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19saW5lICs9IGAgXHUyNkQ0ICR7bmVzdGluZ19pZHNbbmVzdGluZ19pZHMubGVuZ3RoIC0gMV19YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFkZCBhbiBhdXRvbWF0aWMgdGFnIGlmIHdlIG5lZWQgaXRcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiBhdXRvbWF0aWNfdGFncykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFnX3RleHQgPSBgICMke3RhZ31gO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc19saW5lLmluZGV4T2YodGFnX3RleHQpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19saW5lICs9IHRhZ190ZXh0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoaXMgbGluZVxuICAgICAgICAgICAgICAgIGxpbmVzICs9IHRoaXNfbGluZTtcbiAgICAgICAgICAgICAgICBpZHggKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAoaXNfcGFyYWxsZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5lc3RpbmdfaWRzW25lc3RpbmdfaWRzLmxlbmd0aCAtIDFdKSBuZXN0aW5nX2lkc1tuZXN0aW5nX2lkcy5sZW5ndGggLSAxXSArPSBcIixcIjtcbiAgICAgICAgICAgICAgICAgICAgbmVzdGluZ19pZHNbbmVzdGluZ19pZHMubGVuZ3RoIC0gMV0gKz0gYCR7dGhpc19pZH1gO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5lc3RpbmdfaWRzW25lc3RpbmdfaWRzLmxlbmd0aCAtIDFdID0gdGhpc19pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKERFQlVHKSBjb25zb2xlLmxvZyhgTmVzdGluZyBsZXZlbCAke2N1cnJlbnRfbmVzdGluZ30sIGlkcyAke25lc3RpbmdfaWRzfWApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBOb3QgYSB0YXNrIGxpbmUgc28ganVzdCBrZWVwIGl0IGFzIGlzXG4gICAgICAgICAgICAgICAgbGluZXMgKz0gbWF0Y2gubGluZV90ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuXG4gICAgc3RhdGljIGJsb2NrVXBkYXRlKGVkaXRvcjogU2ltcGxlRWRpdG9yLCBmaWxlbmFtZTogc3RyaW5nLCBhZGRfaWRzOiBib29sZWFuLCBzZXR0aW5nczogUHJvamVjdFRhc2tzU2V0dGluZ3MsKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMuZ2V0UHJlZml4KGVkaXRvciwgZmlsZW5hbWUsIHNldHRpbmdzKTtcbiAgICAgICAgY29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lKTtcblxuICAgICAgICAvLyBHZXQgdGhlIGJsb2NrIGJvdW5kYXJpZXNcbiAgICAgICAgbGV0IGJsb2NrU3RhcnQgPSBIZWxwZXIuZ2V0QmxvY2tTdGFydChlZGl0b3IpO1xuICAgICAgICBsZXQgYmxvY2tFbmQgPSBIZWxwZXIuZ2V0QmxvY2tFbmQoZWRpdG9yKTtcbiAgICAgICAgbGV0IGxhc3RfbGluZV9sZW5ndGggPSBlZGl0b3IuZ2V0TGluZShibG9ja0VuZCArIDEpLmxlbmd0aDtcblxuICAgICAgICBjb25zdCBibG9ja0NvbnRlbnQgPSBlZGl0b3IuZ2V0UmFuZ2Uoe2xpbmU6IGJsb2NrU3RhcnQsIGNoOiAwfSwge2xpbmU6IGJsb2NrRW5kLCBjaDogbGFzdF9saW5lX2xlbmd0aH0pO1xuICAgICAgICBpZiAoREVCVUcpIGNvbnNvbGUubG9nKGBTdGFydCAke2Jsb2NrU3RhcnR9LCBFbmQgJHtibG9ja0VuZH0sIGxhc3QgbGVuZ3RoICR7bGFzdF9saW5lX2xlbmd0aH1cXG5PcmlnOiAke2Jsb2NrQ29udGVudH1gKTtcblxuICAgICAgICBsZXQgbGluZXM7XG4gICAgICAgIGlmIChhZGRfaWRzKSB7XG4gICAgICAgICAgICBsaW5lcyA9IEhlbHBlci5hZGRUYXNrSURzKGJsb2NrQ29udGVudCwgcHJlZml4LCBzZXR0aW5ncy5hdXRvbWF0aWNUYWdOYW1lcyxcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5uZXN0ZWRUYXNrQmVoYXZpb3IgPT0gTmVzdGluZ0JlaGF2aW91ci5QYXJhbGxlbEV4ZWN1dGlvbixcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5pZFByZWZpeE1ldGhvZCA9PSBQcmVmaXhNZXRob2QuVXNlUHJlZml4LFxuICAgICAgICAgICAgICAgIHNldHRpbmdzLnJhbmRvbUlETGVuZ3RoLCBzZXR0aW5ncy5zZXF1ZW50aWFsU3RhcnROdW1iZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lcyA9IEhlbHBlci5jbGVhckJsb2NrSURzKGJsb2NrQ29udGVudCwgc2V0dGluZ3MuYXV0b21hdGljVGFnTmFtZXMsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuY2xlYXJBbGxUYWdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChERUJVRykgY29uc29sZS5sb2coYFN0YXJ0ICR7YmxvY2tTdGFydH0sIEVuZCAke2Jsb2NrRW5kfSwgbGFzdCBsZW5ndGggJHtsYXN0X2xpbmVfbGVuZ3RofVxcbk9yaWc6ICR7YmxvY2tDb250ZW50fVxcbk5ldzogJHtsaW5lc31gKTtcbiAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShsaW5lcywge2xpbmU6IGJsb2NrU3RhcnQsIGNoOiAwfSwge2xpbmU6IGJsb2NrRW5kLCBjaDogbGFzdF9saW5lX2xlbmd0aH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRFbnRpcmVDb252ZXJ0ZWRGaWxlKGVkaXRvcjogU2ltcGxlRWRpdG9yLCBmaWxlbmFtZTogc3RyaW5nLCBzZXR0aW5nczogUHJvamVjdFRhc2tzU2V0dGluZ3MpIHtcbiAgICAgICAgbGV0IGluaXRpYWxfY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpXG4gICAgICAgIGZvciAobGV0IGJsb2NrX3N0YXJ0IG9mIHRoaXMuZ2V0QWxsQmxvY2tTdGFydHMoZWRpdG9yKSkge1xuICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7bGluZTogYmxvY2tfc3RhcnQsIGNoOiAwfSk7XG4gICAgICAgICAgICB0aGlzLmJsb2NrVXBkYXRlKGVkaXRvciwgZmlsZW5hbWUsIHRydWUsIHNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHtsaW5lOiBpbml0aWFsX2N1cnNvci5saW5lLCBjaDogaW5pdGlhbF9jdXJzb3IuY2h9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcGFyc2VMaW5lKGxpbmU6IHN0cmluZykge1xuICAgICAgICBjb25zdCByZWdleCA9IC9eKFxccyotXFxzXFxbKFsgeFxcLVxcL10pXFxdXFxzKT8oLiopJC87XG4gICAgICAgIGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMobGluZSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgLy8gV2FzIGFuIGV4cGVjdGVkIGxpbmVcbiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSB0YXNrIGxpbmVcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhcnNlZExpbmUodHJ1ZSwgbWF0Y2hbMl0sIG1hdGNoWzNdLCB0aGlzLmdldE5lc3RpbmdMZXZlbChsaW5lKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXNuJ3QgYSB0YXNrIGxpbmVcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhcnNlZExpbmUoZmFsc2UsICcnLCBtYXRjaFszXSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTb21ldGhpbmcgd2VudCB3cm9uZyBoZXJlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExpbmUgd2FzIG5vdCB1bmRlcnN0b29kOiBcIiR7bGluZX1cImApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgZ2V0UHJlZml4KGVkaXRvcjogU2ltcGxlRWRpdG9yLCBmaWxlbmFtZTogc3RyaW5nLCBzZXR0aW5nczogUHJvamVjdFRhc2tzU2V0dGluZ3MpIHtcbiAgICAgICAgbGV0IHJhd19wcmVmaXg7XG4gICAgICAgIHN3aXRjaCAoc2V0dGluZ3MuaWRQcmVmaXhNZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgUHJlZml4TWV0aG9kLlVzZVByZWZpeDoge1xuICAgICAgICAgICAgICAgIHJhd19wcmVmaXggPSBzZXR0aW5ncy5wcm9qZWN0UHJlZml4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBQcmVmaXhNZXRob2QuRmlsZU5hbWU6IHtcbiAgICAgICAgICAgICAgICByYXdfcHJlZml4ID0gZmlsZW5hbWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFByZWZpeE1ldGhvZC5TZWN0aW9uTmFtZToge1xuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSBuYW1lIG9mIHRoZSBibG9jayB0aGF0IGNvbnRhaW5zIHRoZSBjdXJzb3Igb3IgdGhlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgIHJhd19wcmVmaXggPSBIZWxwZXIuZ2V0U2VjdGlvbk5hbWUoZWRpdG9yLCBmaWxlbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEhlbHBlci5nZXRQcmVmaXhGcm9tU3RyaW5nKHJhd19wcmVmaXgsIHNldHRpbmdzLmZpcnN0TGV0dGVyc09mV29yZHMsIHNldHRpbmdzLnJlbW92ZVZvd2Vscyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFByZWZpeEZyb21TdHJpbmcodGV4dDogc3RyaW5nLCBmaXJzdF9sZXR0ZXJzOiBib29sZWFuLCByZW1vdmVfdm93ZWxzOiBib29sZWFuKSB7XG4gICAgICAgIC8vIFJlbW92ZSBhbnkgc3BlY2lhbCBzaWduc1xuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKC9bI1xcW1xcXV0vZywgJycpO1xuICAgICAgICAvLyBCcmVhayBpbnRvIHdvcmRzXG4gICAgICAgIGxldCB3b3JkcyA9IHRleHQuc3BsaXQoL1xccysvKTtcbiAgICAgICAgdGV4dCA9IFwiXCI7XG4gICAgICAgIGZvciAobGV0IHdvcmQgb2Ygd29yZHMpIHtcbiAgICAgICAgICAgIGlmICh3b3JkKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGAke3RleHR9JHt3b3JkWzBdLnRvVXBwZXJDYXNlKCl9YDtcbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0X2xldHRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbWFpbmRlciA9IHdvcmQuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB2b3dlbHMgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmVfdm93ZWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1haW5kZXIgPSByZW1haW5kZXIucmVwbGFjZUFsbCgvW2FlaW91XS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGAke3RleHR9JHtyZW1haW5kZXJ9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIHNwYWNlc1xuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKCcgJywgJycpO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQStFOzs7QUNHL0UsSUFBTSxpQkFBaUI7QUFDdkIsSUFBTSxRQUFRO0FBMEJQLElBQU0sbUJBQXlDO0FBQUEsRUFDbEQsZ0JBQWdCO0FBQUEsRUFDaEIsZUFBZTtBQUFBLEVBQ2YsZ0JBQWdCO0FBQUEsRUFDaEIsdUJBQXVCO0FBQUEsRUFDdkIsY0FBYztBQUFBLEVBQ2QscUJBQXFCO0FBQUEsRUFDckIsbUJBQW1CLENBQUMsU0FBUztBQUFBLEVBQzdCLGNBQWM7QUFBQSxFQUNkLG9CQUFvQjtBQUN4QjtBQW9CQSxJQUFNLGFBQU4sTUFBaUI7QUFBQSxFQUdiLFlBQW1CLFNBQXlCLGFBQTRCLFdBQ3JELFNBQWlCO0FBRGpCO0FBQXlCO0FBQTRCO0FBQ3JEO0FBQ2YsUUFBSSxLQUFLLFNBQVM7QUFDZCxVQUFJLFVBQVUsSUFBSyxPQUFPLE9BQU87QUFDakMsV0FBSyxjQUFjLEdBQUcsYUFBYTtBQUFBLElBQ3ZDLE9BQU87QUFDSCxXQUFLLGNBQWM7QUFBQSxJQUN2QjtBQUFB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
