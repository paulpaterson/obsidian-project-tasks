/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ProjectTasks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// helpers.ts
var BLOCK_BOUNDARY = /^#+\s/;
var DEBUG = true;
var ParsedLine = class {
  constructor(is_task, status_type, line_text, nesting) {
    this.is_task = is_task;
    this.status_type = status_type;
    this.line_text = line_text;
    this.nesting = nesting;
    if (this.is_task) {
      let indents = "	".repeat(nesting);
      this.task_prefix = `${indents}- [${status_type}] `;
    } else {
      this.task_prefix = "";
    }
  }
  getLineSplit(line) {
    return line.split(/(\s+)/);
  }
  removeAllTags() {
    return this.removeTags();
  }
  removeTags(tags_to_remove) {
    let words = this.getLineSplit(this.line_text);
    for (let idx = 0; idx < words.length; idx++) {
      let word = words[idx];
      if (word.trim().length != 0) {
        let is_valid_tag = word.startsWith("#") && (!tags_to_remove || tags_to_remove.indexOf(word.slice(1)) >= 0);
        if (is_valid_tag) {
          words[idx] = "";
          if (idx != 0) {
            words[idx - 1] = "";
          } else if (idx != words.length - 1) {
            words[idx + 1] = "";
          }
        }
      } else {
        if (idx == words.length - 1) {
          words[idx] = "";
        }
      }
    }
    return words.join("");
  }
};
var Helper = class {
  // Simple helper class that contains the business logic
  // of the app. This is extracted here to allow unit testing
  constructor() {
  }
  static getNestingLevel(task_marker) {
    let parts = task_marker.replaceAll("\n", "").split("-");
    return parts[0].length;
  }
  static generateRandomDigits(length) {
    const digits = "0123456789";
    let randomString = "";
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * digits.length);
      randomString += digits[randomIndex];
    }
    return randomString;
  }
  static getPrefixFromString(text, first_letters, remove_vowels) {
    text = text.replaceAll(/[#\[\]]/g, "");
    let words = text.split(/\s+/);
    text = "";
    for (let word of words) {
      if (word) {
        text = `${text}${word[0].toUpperCase()}`;
        if (!first_letters) {
          let remainder = word.slice(1);
          if (remove_vowels) {
            remainder = remainder.replaceAll(/[aeiou]/g, "");
          }
          text = `${text}${remainder}`;
        }
      }
    }
    text = text.replaceAll(" ", "");
    return text;
  }
  static clearBlockIDs(sel, automatic_tag, clear_all_tags) {
    let remove_id = /ðŸ†”\s[\w,]+[ \t]*/g;
    sel = sel.replaceAll(remove_id, "");
    let remove_block = /â›”\s[\w,]+[ \t]*/g;
    sel = sel.replaceAll(remove_block, "");
    let cleaned_text = [];
    for (let line of sel.split(/\r?\n/)) {
      let parsed = this.parseLine(line);
      if (parsed.is_task) {
        if (clear_all_tags) {
          cleaned_text.push(parsed.task_prefix + parsed.removeAllTags());
        } else {
          cleaned_text.push(parsed.task_prefix + parsed.removeTags([automatic_tag]));
        }
      } else {
        cleaned_text.push(parsed.line_text);
      }
    }
    return cleaned_text.join("\n");
  }
  static getBlockEnd(editor) {
    let blockEnd = editor.getCursor().line;
    if (blockEnd >= editor.lineCount() - 1)
      return blockEnd + 1;
    blockEnd += 1;
    while (!BLOCK_BOUNDARY.test(editor.getLine(blockEnd))) {
      blockEnd++;
      if (blockEnd > editor.lineCount() - 1)
        return blockEnd;
    }
    return blockEnd;
  }
  static getBlockStart(editor) {
    let blockStart = editor.getCursor().line;
    if (BLOCK_BOUNDARY.test(editor.getLine(blockStart))) {
      return Math.min(editor.lineCount() - 1, blockStart + 1);
    }
    while (blockStart > 0 && !BLOCK_BOUNDARY.test(editor.getLine(blockStart - 1))) {
      blockStart--;
    }
    return blockStart;
  }
  static getAllBlockStarts(editor) {
    let blocks = [0];
    let section = /^#?\s\w+/;
    for (let line_number = 0; line_number < editor.lineCount(); line_number++) {
      if (section.test(editor.getLine(line_number))) {
        if (line_number > 0) {
          blocks.push(line_number);
        }
      }
    }
    return blocks;
  }
  static getSectionName(editor, file_name) {
    let section_start = Helper.getBlockStart(editor);
    if (section_start == 0) {
      return file_name;
    } else {
      return editor.getLine(section_start - 1);
    }
  }
  static addTaskIDs(sel, prefix, automatic_tag, parallel, use_prefix, random_id_length, sequential_start) {
    const regex = /^(\s*-\s\[[ x\-\/]\]\s)?(.*)$/mg;
    sel = Helper.clearBlockIDs(sel, automatic_tag, false);
    if (DEBUG)
      console.log(`Replaced ids and blocks to give: ${sel}`);
    const matches = sel.matchAll(regex);
    let lines = "";
    let first = true;
    let idx = 0;
    let nesting_ids = ["0:ERROR!"];
    let current_nesting = 0;
    let is_parallel = false;
    let this_id;
    for (const match of matches) {
      if (!first) {
        lines += "\n";
      }
      if (match[1]) {
        if (parallel) {
          let nesting_depth = Helper.getNestingLevel(match[1]);
          if (nesting_depth > current_nesting) {
            current_nesting += 1;
            is_parallel = true;
            nesting_ids.push(``);
          } else if (nesting_depth < current_nesting) {
            while (current_nesting > nesting_depth) {
              current_nesting -= 1;
              let nested = nesting_ids.pop();
              if (nested) {
                nesting_ids[nesting_ids.length - 1] += `,${nested}`;
              }
              is_parallel = current_nesting > 0;
            }
          }
        }
        let this_line;
        if (use_prefix) {
          this_id = `${prefix}${Helper.generateRandomDigits(random_id_length)}`;
        } else {
          this_id = `${prefix}${idx + sequential_start}`;
        }
        let cleaned_line = match[2].trim();
        if (cleaned_line != "")
          cleaned_line += " ";
        this_line = `${match[1]}${cleaned_line}\u{1F194} ${this_id}`;
        if (idx > 0) {
          if (is_parallel) {
            this_line += ` \u26D4 ${nesting_ids[current_nesting - 1]}`;
          } else {
            this_line += ` \u26D4 ${nesting_ids[nesting_ids.length - 1]}`;
          }
        }
        if (automatic_tag) {
          this_line += ` #${automatic_tag}`;
        }
        lines += this_line;
        idx += 1;
        if (is_parallel) {
          if (nesting_ids[nesting_ids.length - 1])
            nesting_ids[nesting_ids.length - 1] += ",";
          nesting_ids[nesting_ids.length - 1] += `${this_id}`;
        } else {
          nesting_ids[nesting_ids.length - 1] = this_id;
        }
        if (DEBUG)
          console.log(`Nesting level ${current_nesting}, ids ${nesting_ids}`);
      } else {
        lines += `${match[2]}`;
      }
      first = false;
    }
    return lines;
  }
  static parseLine(line) {
    const regex = /^(\s*-\s\[([ x\-\/])\]\s)?(.*)$/;
    let match = regex.exec(line);
    if (match) {
      if (match[1]) {
        return new ParsedLine(true, match[2], match[3], this.getNestingLevel(line));
      } else {
        return new ParsedLine(false, "", match[3], 0);
      }
    } else {
      throw new Error(`Line was not understood: "${line}"`);
    }
  }
};

// main.ts
var DEBUG2 = true;
var DEFAULT_SETTINGS = {
  idPrefixMethod: "1" /* UsePrefix */,
  projectPrefix: "prj",
  randomIDLength: 6,
  sequentialStartNumber: 1,
  removeVowels: false,
  firstLettersOfWords: false,
  automaticTagName: "Project",
  clearAllTags: false,
  nestedTaskBehavior: "1" /* ParallelExecution */
};
var ProjectTasks = class extends import_obsidian.Plugin {
  async onload() {
    if (DEBUG2)
      console.log("Project Tasks starting");
    await this.loadSettings();
    this.addCommand({
      id: "set-ids",
      name: "Set project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = Helper.addTaskIDs(sel, this.getPrefix(editor, view), this.settings.automaticTagName, this.settings.nestedTaskBehavior == "1" /* ParallelExecution */, this.settings.idPrefixMethod == "1" /* UsePrefix */, this.settings.randomIDLength, this.settings.sequentialStartNumber);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "clear-ids",
      name: "Clear project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = Helper.clearBlockIDs(sel, this.settings.automaticTagName, this.settings.clearAllTags);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "set-ids-block",
      name: "Set project ids on Block",
      editorCallback: (editor, view) => {
        this.blockUpdate(editor, this.getPrefix(editor, view), true);
      }
    });
    this.addCommand({
      id: "clear-ids-block",
      name: "Clear project ids on Block",
      editorCallback: (editor, view) => {
        this.blockUpdate(editor, this.getPrefix(editor, view), false);
      }
    });
    this.addCommand({
      id: "add-project-task-list",
      name: "Add active project task list",
      editorCallback: (editor, view) => {
        this.addActiveProjectList(editor);
      }
    });
    this.addCommand({
      id: "clear-ids-file",
      name: "Clear project ids in entire file",
      editorCallback: (editor, view) => {
        let last_line = editor.lineCount();
        let range_from = { line: 0, ch: 0 };
        let range_to = { line: last_line, ch: editor.getLine(last_line).length };
        let sel = editor.getRange(range_from, range_to);
        let lines = Helper.clearBlockIDs(sel, this.settings.automaticTagName, this.settings.clearAllTags);
        editor.replaceRange(
          `${lines}`,
          range_from,
          range_to
        );
      }
    });
    this.addSettingTab(new ProjectTasksSettingsTab(this.app, this));
  }
  addActiveProjectList(editor) {
    const active_tasks_view = `\`\`\`tasks
tags includes #${this.settings.automaticTagName}
not done
hide backlink
is not blocked
\`\`\``;
    editor.replaceSelection(active_tasks_view);
  }
  blockUpdate(editor, prefix, add_ids) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    let blockStart = Helper.getBlockStart(editor);
    let blockEnd = Helper.getBlockEnd(editor);
    let last_line_length = editor.getLine(blockEnd + 1).length;
    const blockContent = editor.getRange({ line: blockStart, ch: 0 }, { line: blockEnd, ch: last_line_length });
    if (DEBUG2)
      console.log(`Start ${blockStart}, End ${blockEnd}, last length ${last_line_length}
Orig: ${blockContent}`);
    let lines;
    if (add_ids) {
      lines = Helper.addTaskIDs(blockContent, prefix, this.settings.automaticTagName, this.settings.nestedTaskBehavior == "1" /* ParallelExecution */, this.settings.idPrefixMethod == "1" /* UsePrefix */, this.settings.randomIDLength, this.settings.sequentialStartNumber);
    } else {
      lines = Helper.clearBlockIDs(blockContent, this.settings.automaticTagName, this.settings.clearAllTags);
    }
    if (DEBUG2)
      console.log(`Start ${blockStart}, End ${blockEnd}, last length ${last_line_length}
Orig: ${blockContent}
New: ${lines}`);
    editor.replaceRange(lines, { line: blockStart, ch: 0 }, { line: blockEnd, ch: last_line_length });
  }
  getPrefix(editor, view) {
    let raw_prefix;
    switch (this.settings.idPrefixMethod) {
      case "1" /* UsePrefix */: {
        raw_prefix = this.settings.projectPrefix;
        break;
      }
      case "3" /* FileName */: {
        raw_prefix = this.getFilename(view);
        break;
      }
      case "2" /* SectionName */: {
        raw_prefix = Helper.getSectionName(editor, this.getFilename(view));
      }
    }
    return Helper.getPrefixFromString(raw_prefix, this.settings.firstLettersOfWords, this.settings.removeVowels);
  }
  getFilename(view) {
    var _a;
    if (!((_a = view.file) == null ? void 0 : _a.name)) {
      return this.settings.projectPrefix;
    } else {
      return view.file.name.split(".")[0];
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ProjectTasksSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Project ID method").setDesc("Choose how the ID will be determined").addDropdown((dropDown) => {
      dropDown.addOption("1", "Use prefix");
      dropDown.addOption("2", "Use Section name");
      dropDown.addOption("3", "Use filename").setValue(this.plugin.settings.idPrefixMethod).onChange(async (value) => {
        this.plugin.settings.idPrefixMethod = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Project ID prefix").setDesc("Prefix to use when creating an ID for a task").addText((text) => text.setPlaceholder("ID prefix").setValue(this.plugin.settings.projectPrefix).onChange(async (value) => {
      this.plugin.settings.projectPrefix = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Length of random ID number").setDesc("How many digits to use for random ID when using a fixed prefix").addSlider((text) => text.setValue(this.plugin.settings.randomIDLength).setLimits(3, 6, 1).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.randomIDLength = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Initial sequential ID number").setDesc("Start number for sequential ID's").addSlider((text) => text.setValue(this.plugin.settings.sequentialStartNumber).setLimits(0, 1, 1).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.sequentialStartNumber = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove vowels").setDesc("Remove vowels from the prefix when getting from the filename or block name").addToggle((text) => text.setValue(this.plugin.settings.removeVowels).onChange(async (value) => {
      this.plugin.settings.removeVowels = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("First letter of words").setDesc("Only use the first letter of words to form the prefix").addToggle((text) => text.setValue(this.plugin.settings.firstLettersOfWords).onChange(async (value) => {
      this.plugin.settings.firstLettersOfWords = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Automatically add Tag").setDesc("A tag to add to each task - do not include the # symbol").addText((text) => text.setValue(this.plugin.settings.automaticTagName).setPlaceholder("Tag Name").onChange(async (value) => {
      this.plugin.settings.automaticTagName = value.replaceAll("#", "");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Clear all tags from project tasks").setDesc("When clearing tags from project tasks clear all existing tags not just the automatically added ones").addToggle((text) => text.setValue(this.plugin.settings.clearAllTags).onChange(async (value) => {
      this.plugin.settings.clearAllTags = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Nested tags behaviour").setDesc("Determines whether nested tags will create parallel execution tags or sequential").addDropdown((dropDown) => {
      dropDown.addOption("1", "Parallel Execution");
      dropDown.addOption("2", "Sequential Execution").setValue(this.plugin.settings.nestedTaskBehavior).onChange(async (value) => {
        this.plugin.settings.nestedTaskBehavior = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
