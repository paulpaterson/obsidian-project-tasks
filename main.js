/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ProjectTasks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEBUG = true;
var BLOCK_BOUNDARY = /^#+\s/;
var DEFAULT_SETTINGS = {
  idPrefixMethod: "1" /* UsePrefix */,
  projectPrefix: "prj",
  randomIDLength: 6,
  sequentialStartNumber: 1,
  removeVowels: false,
  firstLettersOfWords: false,
  automaticTagName: ""
};
var ProjectTasks = class extends import_obsidian.Plugin {
  async onload() {
    if (DEBUG)
      console.log("Project Tasks starting");
    await this.loadSettings();
    this.addCommand({
      id: "set-ids",
      name: "Set project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = this.addTaskIDs(sel, this.getPrefix(editor, view));
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "clear-ids",
      name: "Clear project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = this.clearBlockIDs(sel);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "set-ids-block",
      name: "Set project ids on Block",
      editorCallback: (editor, view) => {
        this.blockUpdate(editor, this.getPrefix(editor, view), true);
      }
    });
    this.addCommand({
      id: "clear-ids-block",
      name: "Clear project ids on Block",
      editorCallback: (editor, view) => {
        this.blockUpdate(editor, this.getPrefix(editor, view), false);
      }
    });
    this.addCommand({
      id: "add-project-task-list",
      name: "Add active project task list",
      editorCallback: (editor, view) => {
        this.addActiveProjectList(editor);
      }
    });
    this.addSettingTab(new ProjectTasksSettingsTab(this.app, this));
  }
  addActiveProjectList(editor) {
    const active_tasks_view = `\`\`\`tasks
tags includes #${this.settings.automaticTagName}
not done
hide backlink
is not blocked
\`\`\``;
    editor.replaceSelection(active_tasks_view);
  }
  blockUpdate(editor, prefix, add_ids) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    let blockStart = this.getBlockStart(editor);
    let blockEnd = this.getBlockEnd(editor);
    let last_line_length = editor.getLine(blockEnd + 1).length;
    const blockContent = editor.getRange({ line: blockStart, ch: 0 }, { line: blockEnd, ch: last_line_length });
    if (DEBUG)
      console.log(`Start ${blockStart}, End ${blockEnd}, last length ${last_line_length}
Orig: ${blockContent}`);
    let lines;
    if (add_ids) {
      lines = this.addTaskIDs(blockContent, prefix);
    } else {
      lines = this.clearBlockIDs(blockContent);
    }
    if (DEBUG)
      console.log(`Start ${blockStart}, End ${blockEnd}, last length ${last_line_length}
Orig: ${blockContent}
New: ${lines}`);
    editor.replaceRange(lines, { line: blockStart, ch: 0 }, { line: blockEnd, ch: last_line_length });
  }
  getBlockEnd(editor) {
    let blockEnd = editor.getCursor().line;
    while (!BLOCK_BOUNDARY.test(editor.getLine(blockEnd))) {
      blockEnd++;
      if (blockEnd > editor.lineCount() - 1)
        return blockEnd;
    }
    return blockEnd;
  }
  getBlockStart(editor) {
    let blockStart = editor.getCursor().line;
    while (blockStart > 0 && !BLOCK_BOUNDARY.test(editor.getLine(blockStart - 1))) {
      blockStart--;
    }
    return blockStart;
  }
  generateRandomDigits(length) {
    const digits = "0123456789";
    let randomString = "";
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * digits.length);
      randomString += digits[randomIndex];
    }
    return randomString;
  }
  clearBlockIDs(sel) {
    let remove_id = /\h?ðŸ†”\s\w+\h*/g;
    sel = sel.replaceAll(remove_id, "");
    let remove_block = /\h?â›”\s\w+\h*/g;
    sel = sel.replaceAll(remove_block, "");
    if (this.settings.automaticTagName) {
      let remove_tag = new RegExp("^(-\\s\\[[ x\\-\\/]]\\s.*)(#" + this.settings.automaticTagName + ")(.*)$", "mg");
      sel = sel.replaceAll(remove_tag, "$1 $3");
    }
    return sel;
  }
  getPrefix(editor, view) {
    let raw_prefix;
    switch (this.settings.idPrefixMethod) {
      case "1" /* UsePrefix */: {
        raw_prefix = this.settings.projectPrefix;
        break;
      }
      case "3" /* FileName */: {
        raw_prefix = this.getFilename(view);
        break;
      }
      case "2" /* SectionName */: {
        let section_start = this.getBlockStart(editor);
        let section_line;
        if (section_start == 0) {
          section_line = "";
        } else {
          section_line = editor.getLine(section_start - 1);
        }
        if (DEBUG)
          console.log("Prefix check .. Found section: ", section_start, section_line);
        if (BLOCK_BOUNDARY.test(section_line)) {
          raw_prefix = section_line;
        } else {
          raw_prefix = this.getFilename(view);
        }
        break;
      }
    }
    return this.getPrefixFromString(raw_prefix);
  }
  getFilename(view) {
    var _a;
    if (!((_a = view.file) == null ? void 0 : _a.name)) {
      return this.settings.projectPrefix;
    } else {
      return view.file.name.split(".")[0];
    }
  }
  getPrefixFromString(text) {
    text = text.replaceAll(/[#\[\]]/g, "");
    if (this.settings.firstLettersOfWords) {
      let words = text.split(/\s+/);
      if (DEBUG)
        console.log("found words", words);
      text = "";
      for (let word of words) {
        if (word) {
          text = `${text}${word[0].toUpperCase()}`;
        }
      }
    }
    text = text.replaceAll(" ", "");
    if (this.settings.removeVowels) {
      text = text.replaceAll(/[aeiou]/g, "");
    }
    return text;
  }
  addTaskIDs(sel, prefix) {
    const regex = /^(-\s\[[ x\-\/]\]\s)?(.*)$/mg;
    sel = this.clearBlockIDs(sel);
    if (DEBUG)
      console.log(`Replaced ids and blocks to give: ${sel}`);
    const matches = sel.matchAll(regex);
    let lines = "";
    let first = true;
    let idx = 0;
    let this_id;
    let last_id;
    for (const match of matches) {
      if (!first) {
        lines += "\n";
      }
      if (match[1]) {
        let this_line;
        if (this.settings.idPrefixMethod == "1" /* UsePrefix */) {
          this_id = this.generateRandomDigits(this.settings.randomIDLength);
        } else {
          this_id = `${idx + this.settings.sequentialStartNumber}`;
        }
        this_line = `${match[1]}${match[2].trim()} \u{1F194} ${prefix}${this_id}`;
        if (idx > 0) {
          this_line += ` \u26D4 ${prefix}${last_id}`;
        }
        if (this.settings.automaticTagName) {
          this_line += ` #${this.settings.automaticTagName}`;
        }
        lines += this_line;
        idx += 1;
        last_id = this_id;
      } else {
        lines += `${match[2].trim()}`;
      }
      first = false;
    }
    return lines;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ProjectTasksSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Project ID method").setDesc("Choose how the ID will be determined").addDropdown((dropDown) => {
      dropDown.addOption("1", "Use prefix");
      dropDown.addOption("2", "Use Section name");
      dropDown.addOption("3", "Use filename").setValue(this.plugin.settings.idPrefixMethod).onChange(async (value) => {
        this.plugin.settings.idPrefixMethod = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Project ID prefix").setDesc("Prefix to use when creating an ID for a task").addText((text) => text.setPlaceholder("ID prefix").setValue(this.plugin.settings.projectPrefix).onChange(async (value) => {
      this.plugin.settings.projectPrefix = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Length of random ID number").setDesc("How many digits to use for random ID when using a fixed prefix").addSlider((text) => text.setValue(this.plugin.settings.randomIDLength).setLimits(3, 6, 1).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.randomIDLength = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Initial sequential ID number").setDesc("Start number for sequential ID's").addSlider((text) => text.setValue(this.plugin.settings.sequentialStartNumber).setLimits(0, 1, 1).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.sequentialStartNumber = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove vowels").setDesc("Remove vowels from the prefix when getting from the filename or block name").addToggle((text) => text.setValue(this.plugin.settings.removeVowels).onChange(async (value) => {
      this.plugin.settings.removeVowels = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("First letter of words").setDesc("Only use the first letter of words to form the prefix").addToggle((text) => text.setValue(this.plugin.settings.firstLettersOfWords).onChange(async (value) => {
      this.plugin.settings.firstLettersOfWords = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Automatically add Tag").setDesc("A tag to add to each task - do not include the # symbol").addText((text) => text.setValue(this.plugin.settings.automaticTagName).setPlaceholder("Tag Name").onChange(async (value) => {
      this.plugin.settings.automaticTagName = value.replaceAll("#", "");
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
