/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HelloWorldPaul
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var HelloWorldPaul = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Project Tasks starting");
    await this.loadSettings();
    this.addCommand({
      id: "set-ids",
      name: "Set project ids",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        const regex = /^(-\s\[[ x\-\/]\]\s)?(.*)$/mg;
        let remove_id = /\h?ðŸ†”\s\w+\h*/g;
        sel = sel.replaceAll(remove_id, "");
        let remove_block = /\h?â›”\s\w+\h*/g;
        sel = sel.replaceAll(remove_block, "");
        console.log(`Replaced ids and blocks to give: ${sel}`);
        const matches = sel.matchAll(regex);
        let lines = "";
        let first = true;
        let idx = 0;
        for (const match of matches) {
          if (!first) {
            lines += "\n";
          }
          if (match[1]) {
            lines += `${match[1]}${match[2].trim()} \u{1F194} prj${idx}`;
            if (idx > 0) {
              lines += ` \u26D4 prj${idx - 1}`;
            }
            idx += 1;
          } else {
            lines += `${match[2].trim()}`;
          }
          first = false;
        }
        new import_obsidian.Notice(`Project tasks created from: ${sel}`);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
