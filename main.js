/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ProjectTasks
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  idPrefixMethod: "1" /* UsePrefix */,
  projectPrefix: "prj"
};
var ProjectTasks = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Project Tasks starting");
    await this.loadSettings();
    this.addCommand({
      id: "set-ids",
      name: "Set project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = this.addTaskIDs(sel, this.getPrefix(editor, view));
        new import_obsidian.Notice(`Project tasks created from: ${sel}`);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "clear-ids",
      name: "Clear project ids on Selection",
      editorCallback: (editor, view) => {
        let sel = editor.getSelection();
        let lines = this.clearBlockIDs(sel);
        new import_obsidian.Notice(`Project tasks cleared from: ${sel}`);
        editor.replaceSelection(
          `${lines}`
        );
      }
    });
    this.addCommand({
      id: "set-ids-block",
      name: "Set project ids on Block",
      editorCallback: (editor, view) => {
        this.blockUpdate(editor, this.getPrefix(editor, view), true);
      }
    });
    this.addCommand({
      id: "clear-ids-block",
      name: "Clear project ids on Block",
      editorCallback: (editor, view) => {
        this.blockUpdate(editor, this.getPrefix(editor, view), false);
        console.log("Filename: ", view.file);
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  blockUpdate(editor, prefix, add_ids) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    let blockStart = this.getBlockStart(editor);
    let blockEnd = this.getBlockEnd(editor);
    const blockContent = editor.getRange({ line: blockStart, ch: 0 }, { line: blockEnd, ch: line.length });
    let lines;
    if (add_ids) {
      lines = this.addTaskIDs(blockContent, prefix);
    } else {
      lines = this.clearBlockIDs(blockContent);
    }
    let last_line_length = editor.getLine(blockEnd).length;
    editor.replaceRange(lines, { line: blockStart, ch: 0 }, { line: blockEnd, ch: last_line_length });
  }
  getBlockEnd(editor) {
    const block_boundary = /^#+\s/;
    let blockEnd = editor.getCursor().line;
    while (blockEnd < editor.lineCount() - 1 && !block_boundary.test(editor.getLine(blockEnd + 1))) {
      blockEnd++;
    }
    return blockEnd;
  }
  getBlockStart(editor) {
    const block_boundary = /^#+\s/;
    let blockStart = editor.getCursor().line;
    while (blockStart > 0 && !block_boundary.test(editor.getLine(blockStart - 1))) {
      blockStart--;
    }
    return blockStart;
  }
  clearBlockIDs(sel) {
    let remove_id = /\h?ðŸ†”\s\w+\h*/g;
    sel = sel.replaceAll(remove_id, "");
    let remove_block = /\h?â›”\s\w+\h*/g;
    sel = sel.replaceAll(remove_block, "");
    return sel;
  }
  getPrefix(editor, view) {
    var _a, _b;
    switch (this.settings.idPrefixMethod) {
      case "1" /* UsePrefix */: {
        return this.settings.projectPrefix;
      }
      case "3" /* FileName */: {
        if (!((_a = view.file) == null ? void 0 : _a.name)) {
          return this.settings.projectPrefix;
        } else {
          return view.file.name.replaceAll(" ", "").split(".")[0];
        }
      }
      case "2" /* SectionName */: {
        const block_boundary = /^#+\s/;
        let section_start = this.getBlockStart(editor);
        let section_line;
        if (section_start == 0) {
          section_line = "";
        } else {
          section_line = editor.getLine(section_start - 1);
        }
        console.log("Prefix check .. Found section: ", section_start, section_line);
        if (block_boundary.test(section_line)) {
          return section_line.replaceAll(" ", "").replaceAll("#", "");
        } else {
          if (!((_b = view.file) == null ? void 0 : _b.name)) {
            return this.settings.projectPrefix;
          } else {
            return view.file.name.replaceAll(" ", "").split(".")[0];
          }
        }
      }
    }
  }
  addTaskIDs(sel, prefix) {
    const regex = /^(-\s\[[ x\-\/]\]\s)?(.*)$/mg;
    sel = this.clearBlockIDs(sel);
    console.log(`Replaced ids and blocks to give: ${sel}`);
    const matches = sel.matchAll(regex);
    let lines = "";
    let first = true;
    let idx = 0;
    for (const match of matches) {
      if (!first) {
        lines += "\n";
      }
      if (match[1]) {
        lines += `${match[1]}${match[2].trim()} \u{1F194} ${prefix}${idx}`;
        if (idx > 0) {
          lines += ` \u26D4 ${prefix}${idx - 1}`;
        }
        idx += 1;
      } else {
        lines += `${match[2].trim()}`;
      }
      first = false;
    }
    return lines;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Project ID method").setDesc("Choose how the ID will be determined").addDropdown((dropDown) => {
      dropDown.addOption("1", "Use prefix");
      dropDown.addOption("2", "Use Section name");
      dropDown.addOption("3", "Use filename").setValue(this.plugin.settings.idPrefixMethod).onChange(async (value) => {
        this.plugin.settings.idPrefixMethod = value;
        console.log(`Set to ${value}, ${this.plugin.settings.idPrefixMethod}`);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Project ID prefix").setDesc("Prefix to use when creating an ID for a task").addText((text) => text.setPlaceholder("ID prefix").setValue(this.plugin.settings.projectPrefix).onChange(async (value) => {
      this.plugin.settings.projectPrefix = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
